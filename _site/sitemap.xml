<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shortlog</title>
    <description>Uncategorized log of my personal notes.</description>
    <link>http://localhost:4001/</link>
    <atom:link href="http://localhost:4001/sitemap.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 17 Mar 2019 14:04:13 +0530</pubDate>
    <lastBuildDate>Sun, 17 Mar 2019 14:04:13 +0530</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>Linux OOM Killer Policy and Knobs</title>
        <description>&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. Linux OOM killer policy and knobs&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;1.1. Further reading&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;linux-oom-killer-policy-and-knobs&quot;&gt;Linux OOM killer policy and knobs&lt;a id=&quot;sec-1&quot; name=&quot;sec-1&quot;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;/proc/&amp;lt;pid&amp;gt;/oom_adj -  The possible values of oom_adj rangae from -17 to +15. The higher the score, more likely the associated process is to be killed by OOM-killer. If oom_adj is set to -17, the process is not considered for OOM-killing.&lt;/li&gt;
  &lt;li&gt;/proc/&amp;lt;pid&amp;gt;/oom_score - badness score. The more memory the process uses, the higher the score. The longer a process is alive in the system, the smaller the score. Half of each child’s memory size is added to the parent’s score if they do not share the same memory. Thus forking servers are the prime candidates to be killed.&lt;/li&gt;
  &lt;li&gt;If the task has nice value above zero, its score doubles.&lt;/li&gt;
  &lt;li&gt;Superuser or direct hardware access tasks (CAP_SYS_ADMIN, CAP_SYS_RESOURCE or CAP_SYS_RAWIO) have their score divided by 4. This is cumulative, i.e., a super-user task with hardware access would have its score divided by 16.&lt;/li&gt;
  &lt;li&gt;If OOM condition happened in one cpuset and checked task does not belong to that set, its score is divided by 8.&lt;/li&gt;
  &lt;li&gt;The resulting score is multiplied by two to the power of oom_adj (i.e. points &amp;lt;&amp;lt;= oom_adj when it is positive and points &amp;gt;&amp;gt;= oom_adj otherwise).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further reading&lt;a id=&quot;sec-1-1&quot; name=&quot;sec-1-1&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://lwn.net/Articles/317814/&quot;&gt;https://lwn.net/Articles/317814/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Nov 2018 00:00:00 +0530</pubDate>
        <link>http://localhost:4001/linux/2018/11/03/Linux-OOM-Killer.html</link>
        <guid isPermaLink="true">http://localhost:4001/linux/2018/11/03/Linux-OOM-Killer.html</guid>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>Unicode condensed</title>
        <description>&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. Unicode&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;1.1. UTF-32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;1.2. UTF-8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3&quot;&gt;1.3. UTF-16&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-4&quot;&gt;1.4. Dynamic composition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-5&quot;&gt;1.5. Futher reading&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;unicode&quot;&gt;Unicode&lt;a id=&quot;sec-1&quot; name=&quot;sec-1&quot;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;A Unicode character is a sequence of one or more code points. Code point is an index into a space of cardinality 1,114,112.&lt;/li&gt;
  &lt;li&gt;Code points can be represented as U+0000 to U+10FFFF.&lt;/li&gt;
  &lt;li&gt;128,237 code points are actually assigned to scripts. Additional 137,468 code points are reserved for future use.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;utf-32&quot;&gt;UTF-32&lt;a id=&quot;sec-1-1&quot; name=&quot;sec-1-1&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;32 bit index into unicode space.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;utf-8&quot;&gt;UTF-8&lt;a id=&quot;sec-1-2&quot; name=&quot;sec-1-2&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Encoding of code space such that code points are between 1 to 4 octets long. Code point can be decoded using the table below.&lt;/li&gt;
&lt;/ul&gt;

&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col class=&quot;left&quot; /&gt;

&lt;col class=&quot;left&quot; /&gt;

&lt;col class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;UTF-8 (binary)&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;Code point (binary)&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;Range&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;0xxxxxxx&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;xxxxxxx&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;U+0000–U+007F&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;110xxxxx 10yyyyyy&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;xxxxxyyyyyy&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;U+0080–U+07FF&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;1110xxxx 10yyyyyy   10zzzzzz&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;xxxxyyyyyyzzzzzz&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;U+0800–U+FFFF&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;11110xxx 10yyyyyy 10zzzzzz 10wwwwww&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;xxxyyyyyyzzzzzzwwwwww&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;U+10000–U+10FFFF&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;Code points below 128 (ASCII characters) are encoded as single bytes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;utf-16&quot;&gt;UTF-16&lt;a id=&quot;sec-1-3&quot; name=&quot;sec-1-3&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Encoding of code space such that code points are between 1 to 2 Words long and are decoded as per the table below.&lt;/li&gt;
&lt;/ul&gt;

&lt;table border=&quot;20&quot; cellspacing=&quot;20&quot; cellpadding=&quot;20&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col class=&quot;left&quot; /&gt;

&lt;col class=&quot;left&quot; /&gt;

&lt;col class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;UTF-16 (binary)&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;Code point (binary)&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;Range&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;xxxxxxxxxxxxxxxx&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;xxxxxxxxxxxxxxxx&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;U+0000–U+FFFF&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;110110xxxxxxxxxx 110111yyyyyyyyyy&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;xxxxxxxxxxyyyyyyyyyy + 0x10000&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;U+10000–U+10FFFF&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;UTF-16’s words can be stored either little-endian or big-endian. There is convention of putting U+FEFF zero width no-break space at the top of a UTF-16 file as a byte-order mark, to disambiguate the endianness.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dynamic-composition&quot;&gt;Dynamic composition&lt;a id=&quot;sec-1-4&quot; name=&quot;sec-1-4&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;“Á” can be expressed as a string of two code points: U+0041 “A” latin capital letter a plus U+0301 “◌́” combining acute accent.&lt;/li&gt;
  &lt;li&gt;In this example, A is base code point, Accent ◌́ is combining mark&lt;/li&gt;
  &lt;li&gt;Canonical equivalence: There may be two or more ways to dynamically compose same user perceived characters. eg. for “ệ” - U+1EB9 “ẹ” + U+0302 “◌̂” and U+00EA “ê” + U+0323 “◌̣”&lt;/li&gt;
  &lt;li&gt;several normalization forms exist to convert strings into a canonical form so that they can be compared code-point-by-code-point. eg. NFD form, NFC form and NFKD and NFKC forms.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;futher-reading&quot;&gt;Futher reading&lt;a id=&quot;sec-1-5&quot; name=&quot;sec-1-5&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://reedbeta.com/blog/programmers-intro-to-unicode/&quot;&gt;http://reedbeta.com/blog/programmers-intro-to-unicode/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Mar 2017 00:00:00 +0530</pubDate>
        <link>http://localhost:4001/general/2017/03/10/unicode.html</link>
        <guid isPermaLink="true">http://localhost:4001/general/2017/03/10/unicode.html</guid>
        
        
        <category>general</category>
        
      </item>
    
  </channel>
</rss>
